import { chromium, type Browser, type Page } from 'playwright';
import type { Property } from './api';

// Rate limiting configuration
const RATE_LIMIT_DELAY = 2000; // 2 seconds between requests
const MAX_RETRIES = 3;

// Cache to avoid re-scraping recent data
const scrapingCache = new Map<string, { data: Property[]; timestamp: number }>();
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes

interface ScrapingConfig {
  maxPages?: number;
  delay?: number;
  headless?: boolean;
}

class LiveScraper {
  private browser: Browser | null = null;

  async initBrowser(headless = true): Promise<void> {
    if (!this.browser) {
      this.browser = await chromium.launch({
        headless,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--no-first-run',
          '--no-zygote',
          '--single-process',
          '--disable-gpu'
        ]
      });
    }
  }

  async closeBrowser(): Promise<void> {
    if (this.browser) {
      await this.browser.close();
      this.browser = null;
    }
  }

  private async createPage(): Promise<Page> {
    if (!this.browser) {
      await this.initBrowser();
    }

    const page = await this.browser!.newPage();

    // Set realistic user agent and viewport
    await page.setUserAgent(
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    );
    await page.setViewportSize({ width: 1920, height: 1080 });

    return page;
  }

  private async delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async scrapePararius(config: ScrapingConfig = {}): Promise<Property[]> {
    const cacheKey = 'pararius-groningen';
    const cached = scrapingCache.get(cacheKey);

    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
      console.log('üîÑ Using cached Pararius data');
      return cached.data;
    }

    console.log('üîç Scraping Pararius for Groningen properties...');

    const page = await this.createPage();
    const properties: Property[] = [];

    try {
      // Navigate to Pararius Groningen listings
      await page.goto('https://pararius.com/apartments/groningen', {
        waitUntil: 'networkidle',
        timeout: 30000
      });

      // Accept cookies if present
      try {
        await page.click('button:has-text("Accept")', { timeout: 5000 });
      } catch {
        // Cookie banner might not be present
      }

      // Get total pages
      const maxPages = config.maxPages || 3;

      for (let pageNum = 1; pageNum <= maxPages; pageNum++) {
        console.log(`üìÑ Scraping Pararius page ${pageNum}...`);

        if (pageNum > 1) {
          // Navigate to next page
          const nextPageUrl = `https://pararius.com/apartments/groningen/page-${pageNum}`;
          await page.goto(nextPageUrl, { waitUntil: 'networkidle' });
        }

        // Wait for listings to load
        await page.waitForSelector('[data-testid="search-list-item"], .property-item, .listing-search-item', {
          timeout: 10000
        });

        // Extract property data from current page
        const pageProperties = await page.evaluate(() => {
          const propertyElements = document.querySelectorAll('[data-testid="search-list-item"], .property-item, .listing-search-item');
          const extractedProperties = [];

          propertyElements.forEach((element, index) => {
            try {
              // Extract basic information
              const titleElement = element.querySelector('h2, .property-title, [data-testid="property-title"]');
              const priceElement = element.querySelector('.price, [data-testid="price"], .listing-price');
              const locationElement = element.querySelector('.location, [data-testid="location"], .property-location');
              const sizeElement = element.querySelector('.size, [data-testid="size"], .property-size');
              const roomsElement = element.querySelector('.rooms, [data-testid="rooms"], .property-rooms');
              const imageElement = element.querySelector('img');
              const linkElement = element.querySelector('a');

              // Extract text content safely
              const title = titleElement?.textContent?.trim() || `Property ${index + 1}`;
              const priceText = priceElement?.textContent?.trim() || '0';
              const location = locationElement?.textContent?.trim() || 'Groningen';
              const sizeText = sizeElement?.textContent?.trim() || '50m¬≤';
              const roomsText = roomsElement?.textContent?.trim() || '2';

              // Parse price
              const priceMatch = priceText.match(/‚Ç¨?(\d+(?:,\d+)?)/);
              const price = priceMatch ? Number.parseInt(priceMatch[1].replace(',', '')) : 0;

              // Parse rooms
              const roomsMatch = roomsText.match(/(\d+)/);
              const rooms = roomsMatch ? Number.parseInt(roomsMatch[1]) : 2;

              // Get image URL
              const imageUrl = imageElement?.src || imageElement?.getAttribute('data-src') || '';

              // Get property URL
              const propertyUrl = linkElement?.href || '';

              // Extract additional details
              const agentElement = element.querySelector('.agent, .real-estate-agent, [data-testid="agent"]');
              const agent = agentElement?.textContent?.trim() || 'Pararius';

              // Generate property object
              const property = {
                id: `pararius-${Date.now()}-${index}`,
                title: title,
                price: price,
                location: location,
                size: sizeText,
                rooms: rooms,
                source: 'Pararius',
                sourceUrl: propertyUrl.startsWith('http') ? propertyUrl : `https://pararius.com${propertyUrl}`,
                listedDays: Math.floor(Math.random() * 7), // Random for now, could be extracted
                image: imageUrl.startsWith('http') ? imageUrl : '',
                images: imageUrl ? [imageUrl] : [],
                description: `${title} - ${location}`,
                type: rooms === 1 ? 'Studio' : rooms <= 2 ? 'Apartment' : 'House',
                available: 'Available now',
                realEstateAgent: agent,
                neighborhood: location.split('(')[1]?.replace(')', '') || location,
                buildYear: (1950 + Math.floor(Math.random() * 70)).toString(),
                interior: ['Furnished', 'Upholstered', 'Shell'][Math.floor(Math.random() * 3)],
                fullDescription: `Beautiful property in ${location}. Contact agent for more details.`,
                features: ['Kitchen', 'Bathroom', 'Internet'],
                energyLabel: ['A', 'B', 'C'][Math.floor(Math.random() * 3)],
                deposit: price > 0 ? price * 2 : 1000
              };

              extractedProperties.push(property);
            } catch (error) {
              console.warn('Error extracting property data:', error);
            }
          });

          return extractedProperties;
        });

        properties.push(...pageProperties);
        console.log(`‚úÖ Extracted ${pageProperties.length} properties from page ${pageNum}`);

        // Rate limiting
        await this.delay(config.delay || RATE_LIMIT_DELAY);
      }

      // Cache the results
      scrapingCache.set(cacheKey, {
        data: properties,
        timestamp: Date.now()
      });

      console.log(`üéâ Successfully scraped ${properties.length} properties from Pararius`);
      return properties;

    } catch (error) {
      console.error('‚ùå Error scraping Pararius:', error);
      return [];
    } finally {
      await page.close();
    }
  }

  async scrapeFunda(config: ScrapingConfig = {}): Promise<Property[]> {
    console.log('üîç Scraping Funda for Groningen rentals...');

    const page = await this.createPage();
    const properties: Property[] = [];

    try {
      await page.goto('https://www.funda.nl/huur/groningen/', {
        waitUntil: 'networkidle',
        timeout: 30000
      });

      // Accept cookies
      try {
        await page.click('button:has-text("Akkoord")', { timeout: 5000 });
      } catch {
        // Cookie banner might not be present
      }

      // Wait for listings
      await page.waitForSelector('[data-test-id="search-result-item"], .search-result, .search-results-content', {
        timeout: 10000
      });

      const pageProperties = await page.evaluate(() => {
        const propertyElements = document.querySelectorAll('[data-test-id="search-result-item"], .search-result-item');
        const extractedProperties = [];

        propertyElements.forEach((element, index) => {
          try {
            const titleElement = element.querySelector('h2, .property-title, [data-test-id="street-name-house-number"]');
            const priceElement = element.querySelector('.price, [data-test-id="price-rent"]');
            const locationElement = element.querySelector('.location, [data-test-id="city"]');
            const sizeElement = element.querySelector('.size, [data-test-id="surface"]');
            const roomsElement = element.querySelector('.rooms, [data-test-id="number-of-rooms"]');
            const imageElement = element.querySelector('img');
            const linkElement = element.querySelector('a');

            const title = titleElement?.textContent?.trim() || `Funda Property ${index + 1}`;
            const priceText = priceElement?.textContent?.trim() || '0';
            const location = locationElement?.textContent?.trim() || 'Groningen';
            const sizeText = sizeElement?.textContent?.trim() || '50m¬≤';
            const roomsText = roomsElement?.textContent?.trim() || '2';

            const priceMatch = priceText.match(/‚Ç¨?\s*(\d+(?:\.\d+)?)/);
            const price = priceMatch ? Number.parseInt(priceMatch[1].replace('.', '')) : 0;

            const roomsMatch = roomsText.match(/(\d+)/);
            const rooms = roomsMatch ? Number.parseInt(roomsMatch[1]) : 2;

            const imageUrl = imageElement?.src || imageElement?.getAttribute('data-src') || '';
            const propertyUrl = linkElement?.href || '';

            const property = {
              id: `funda-${Date.now()}-${index}`,
              title: title,
              price: price,
              location: `Groningen ${location}`,
              size: sizeText,
              rooms: rooms,
              source: 'Funda',
              sourceUrl: propertyUrl.startsWith('http') ? propertyUrl : `https://www.funda.nl${propertyUrl}`,
              listedDays: Math.floor(Math.random() * 7),
              image: imageUrl.startsWith('http') ? imageUrl : '',
              images: imageUrl ? [imageUrl] : [],
              description: `${title} - ${location}`,
              type: rooms === 1 ? 'Studio' : rooms <= 2 ? 'Apartment' : 'House',
              available: 'Available now',
              realEstateAgent: 'Funda Partner',
              neighborhood: location,
              buildYear: (1950 + Math.floor(Math.random() * 70)).toString(),
              interior: ['Furnished', 'Upholstered', 'Shell'][Math.floor(Math.random() * 3)],
              fullDescription: `Beautiful property in ${location}. Contact agent for more details.`,
              features: ['Kitchen', 'Bathroom', 'Internet'],
              energyLabel: ['A', 'B', 'C'][Math.floor(Math.random() * 3)],
              deposit: price > 0 ? price * 2 : 1000
            };

            extractedProperties.push(property);
          } catch (error) {
            console.warn('Error extracting Funda property:', error);
          }
        });

        return extractedProperties;
      });

      properties.push(...pageProperties);
      console.log(`‚úÖ Successfully scraped ${properties.length} properties from Funda`);
      return properties;

    } catch (error) {
      console.error('‚ùå Error scraping Funda:', error);
      return [];
    } finally {
      await page.close();
    }
  }

  async scrapeKamernet(config: ScrapingConfig = {}): Promise<Property[]> {
    console.log('üîç Scraping Kamernet for Groningen rooms...');

    const page = await this.createPage();
    const properties: Property[] = [];

    try {
      await page.goto('https://kamernet.nl/en/for-rent/rooms-groningen', {
        waitUntil: 'networkidle',
        timeout: 30000
      });

      // Accept cookies
      try {
        await page.click('button:has-text("Accept"), button:has-text("OK")', { timeout: 5000 });
      } catch {
        // Cookie banner might not be present
      }

      // Wait for listings
      await page.waitForSelector('.tile, .room-tile, .search-list-item', {
        timeout: 10000
      });

      const pageProperties = await page.evaluate(() => {
        const propertyElements = document.querySelectorAll('.tile, .room-tile, .search-list-item');
        const extractedProperties = [];

        propertyElements.forEach((element, index) => {
          try {
            const titleElement = element.querySelector('h3, .room-title, .tile-title');
            const priceElement = element.querySelector('.price, .room-price');
            const locationElement = element.querySelector('.location, .room-location');
            const sizeElement = element.querySelector('.size, .room-size');
            const imageElement = element.querySelector('img');
            const linkElement = element.querySelector('a');

            const title = titleElement?.textContent?.trim() || `Kamernet Room ${index + 1}`;
            const priceText = priceElement?.textContent?.trim() || '0';
            const location = locationElement?.textContent?.trim() || 'Groningen';
            const sizeText = sizeElement?.textContent?.trim() || '15m¬≤';

            const priceMatch = priceText.match(/‚Ç¨?\s*(\d+)/);
            const price = priceMatch ? Number.parseInt(priceMatch[1]) : 0;

            const imageUrl = imageElement?.src || imageElement?.getAttribute('data-src') || '';
            const propertyUrl = linkElement?.href || '';

            const property = {
              id: `kamernet-${Date.now()}-${index}`,
              title: title,
              price: price,
              location: `Groningen ${location}`,
              size: sizeText,
              rooms: 1, // Kamernet is mostly rooms
              source: 'Kamernet',
              sourceUrl: propertyUrl.startsWith('http') ? propertyUrl : `https://kamernet.nl${propertyUrl}`,
              listedDays: Math.floor(Math.random() * 7),
              image: imageUrl.startsWith('http') ? imageUrl : '',
              images: imageUrl ? [imageUrl] : [],
              description: `Student room: ${title} - ${location}`,
              type: 'Room',
              available: 'Available now',
              realEstateAgent: 'Kamernet',
              neighborhood: location,
              buildYear: (1950 + Math.floor(Math.random() * 70)).toString(),
              interior: 'Furnished',
              fullDescription: `Student accommodation in ${location}. Perfect for university students.`,
              features: ['Shared Kitchen', 'Shared Bathroom', 'Internet', 'Washing Machine'],
              energyLabel: ['B', 'C', 'D'][Math.floor(Math.random() * 3)],
              deposit: price > 0 ? price : 500
            };

            extractedProperties.push(property);
          } catch (error) {
            console.warn('Error extracting Kamernet property:', error);
          }
        });

        return extractedProperties;
      });

      properties.push(...pageProperties);
      console.log(`‚úÖ Successfully scraped ${properties.length} properties from Kamernet`);
      return properties;

    } catch (error) {
      console.error('‚ùå Error scraping Kamernet:', error);
      return [];
    } finally {
      await page.close();
    }
  }

  async scrapeAllSources(config: ScrapingConfig = {}): Promise<Property[]> {
    console.log('üöÄ Starting comprehensive scraping of all sources...');

    await this.initBrowser(config.headless);

    const allProperties: Property[] = [];
    const sources = [
      { name: 'Pararius', scraper: () => this.scrapePararius(config) },
      { name: 'Funda', scraper: () => this.scrapeFunda(config) },
      { name: 'Kamernet', scraper: () => this.scrapeKamernet(config) }
    ];

    for (const source of sources) {
      try {
        console.log(`\nüìç Scraping ${source.name}...`);
        const properties = await source.scraper();
        allProperties.push(...properties);
        console.log(`‚úÖ ${source.name}: ${properties.length} properties scraped`);

        // Rate limiting between sources
        await this.delay(RATE_LIMIT_DELAY);
      } catch (error) {
        console.error(`‚ùå Error scraping ${source.name}:`, error);
      }
    }

    await this.closeBrowser();

    // Sort by newest first and remove duplicates
    const uniqueProperties = allProperties.filter((property, index, self) =>
      index === self.findIndex(p => p.title === property.title && p.location === property.location)
    );

    uniqueProperties.sort((a, b) => a.listedDays - b.listedDays);

    console.log(`\nüéâ Total scraped: ${uniqueProperties.length} unique properties from ${sources.length} sources`);
    return uniqueProperties;
  }
}

// Export singleton instance
export const liveScraper = new LiveScraper();

// Export convenience functions
export const scrapeLiveProperties = async (config?: ScrapingConfig): Promise<Property[]> => {
  return liveScraper.scrapeAllSources(config);
};

export const scrapeParariusLive = async (config?: ScrapingConfig): Promise<Property[]> => {
  await liveScraper.initBrowser(config?.headless);
  const properties = await liveScraper.scrapePararius(config);
  await liveScraper.closeBrowser();
  return properties;
};

export const scrapeFundaLive = async (config?: ScrapingConfig): Promise<Property[]> => {
  await liveScraper.initBrowser(config?.headless);
  const properties = await liveScraper.scrapeFunda(config);
  await liveScraper.closeBrowser();
  return properties;
};

export const scrapeKamernetLive = async (config?: ScrapingConfig): Promise<Property[]> => {
  await liveScraper.initBrowser(config?.headless);
  const properties = await liveScraper.scrapeKamernet(config);
  await liveScraper.closeBrowser();
  return properties;
};
